<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>practise</groupId>
  <artifactId>SeleniumFrameworkMaven</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <name>SeleniumFrameworkMaven</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!--Change the maven compiler source & target to 1.8 as we using stream function which support only in 1.8
    base on java version you provide ur maven user base to execution-->
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>

  <dependencies>

	  <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.12.0</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.testng/testng -->
<dependency>
    <groupId>org.testng</groupId>
    <artifactId>testng</artifactId>
    <version>6.14.3</version>
    <scope>test</scope>
</dependency>

<!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager -->
<dependency>
    <groupId>io.github.bonigarcia</groupId>
    <artifactId>webdrivermanager</artifactId>
    <version>5.5.3</version>
</dependency>

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.15.2</version>
</dependency>

<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
<dependency>
    <groupId>com.aventstack</groupId>
    <artifactId>extentreports</artifactId>
    <version>5.1.0</version>
</dependency>


  </dependencies>
  
  <profiles>
	  <profile>
		  <id>Regression</id>
		   <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
		  
		  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <suiteXmlFiles>
			  <!--Its static way to mention, but here there are many xml files so to run dynamically through cmd prompt, we have to make it dynamic-->
			  <!--In real time project there can be 10-100 testng xml files.Instead for all xml u have to provide entry in this pom.xml and need to give 
			  give one name to each xml.So u can run the test base upon its name. In maven there is profiles -->
            <suiteXmlFile>testSuites/testng.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
      </plugins>
    </pluginManagement>
		   </build>
		  
	  </profile>
	  
	  <profile>
		  <id>Purchase</id>
		  
		  	   <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
		  
		  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <suiteXmlFiles>
			  <!--Its static way to mention, but here there are many xml files so to run dynamically through cmd prompt, we have to make it dynamic-->
			  <!--In real time project there can be 10-100 testng xml files.Instead for all xml u have to provide entry in this pom.xml and need to give 
			  give one name to each xml.So u can run the test base upon its name. In maven there is profiles -->
            <suiteXmlFile>testSuites/PurchaseDataProvider.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
      </plugins>
    </pluginManagement>
		   </build>
		  
	  </profile>
	  
	  <profile>
		  <id>PurchaseMap</id>
		  
		  	   <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
		  
		  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <suiteXmlFiles>
			  <!--Its static way to mention, but here there are many xml files so to run dynamically through cmd prompt, we have to make it dynamic-->
			  <!--In real time project there can be 10-100 testng xml files.Instead for all xml u have to provide entry in this pom.xml and need to give 
			  give one name to each xml.So u can run the test base upon its name. In maven there is profiles -->
            <suiteXmlFile>testSuites/PurchaseDataProviderHashMap.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
      </plugins>
    </pluginManagement>
		   </build>
	  </profile>
	  
	  <profile>
		  <id>PurchaseJson</id>
		  
		  	   <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
		  
		  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <suiteXmlFiles>
			  <!--Its static way to mention, but here there are many xml files so to run dynamically through cmd prompt, we have to make it dynamic-->
			  <!--In real time project there can be 10-100 testng xml files.Instead for all xml u have to provide entry in this pom.xml and need to give 
			  give one name to each xml.So u can run the test base upon its name. In maven there is profiles -->
            <suiteXmlFile>testSuites/PruchaseDataProviderJsonFile.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
      </plugins>
    </pluginManagement>
		   </build>
	  </profile>
	  
	  <profile>
		  <id>PurcahseListeners</id>
		  
		  	   <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
		  
		  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <suiteXmlFiles>
			  <!--Its static way to mention, but here there are many xml files so to run dynamically through cmd prompt, we have to make it dynamic-->
			  <!--In real time project there can be 10-100 testng xml files.Instead for all xml u have to provide entry in this pom.xml and need to give 
			  give one name to each xml.So u can run the test base upon its name. In maven there is profiles -->
            <suiteXmlFile>testSuites/testngListeners.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
      </plugins>
    </pluginManagement>
		   </build>
		  
	  </profile>
	  
	  <profile>
		  <id>PurchaseThreadLocals</id>
		  
		  	   <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
		  
		  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <suiteXmlFiles>
			  <!--Its static way to mention, but here there are many xml files so to run dynamically through cmd prompt, we have to make it dynamic-->
			  <!--In real time project there can be 10-100 testng xml files.Instead for all xml u have to provide entry in this pom.xml and need to give 
			  give one name to each xml.So u can run the test base upon its name. In maven there is profiles -->
            <suiteXmlFile>testSuites/testngListenersThreadLocals.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
      </plugins>
    </pluginManagement>
		   </build>
		  
	  </profile>
	  
	  <profile>
		  <id>ErrorValidations</id>
		  
		  	   <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
		  
		  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <suiteXmlFiles>
			  <!--Its static way to mention, but here there are many xml files so to run dynamically through cmd prompt, we have to make it dynamic-->
			  <!--In real time project there can be 10-100 testng xml files.Instead for all xml u have to provide entry in this pom.xml and need to give 
			  give one name to each xml.So u can run the test base upon its name. In maven there is profiles -->
            <suiteXmlFile>testSuites/ErrorValidationsTest.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
      </plugins>
    </pluginManagement>
		   </build>
		  
	  </profile>
  </profiles>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
		  
		  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <suiteXmlFiles>
			  <!--Its static way to mention, but here there are many xml files so to run dynamically through cmd prompt, we have to make it dynamic-->
			  <!--In real time project there can be 10-100 testng xml files.Instead for all xml u have to provide entry in this pom.xml and need to give 
			  give one name to each xml.So u can run the test base upon its name. In maven there is profiles -->
            <suiteXmlFile>testSuites/testngListenersThreadLocals.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
